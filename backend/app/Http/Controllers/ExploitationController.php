<?php

namespace App\Http\Controllers;

use App\Http\Resources\ExploitationResource;
use App\Models\Exploitation;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;

class ExploitationController extends Controller
{

    /*
    |--------------------------------------------------------------------------
    | General functions
    |--------------------------------------------------------------------------
    */

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $exploitations = Exploitation::all();
        return ExploitationResource::collection($exploitations);
    }


    /*
    |--------------------------------------------------------------------------
    | Producer functions
    |--------------------------------------------------------------------------
    */

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function owner()
    {
        $loggedUser   = Auth::user();
        $loggedUserId = (int) $loggedUser->id;
        $exploitations = Exploitation::where(['user_id' => $loggedUserId])->get();
        return ExploitationResource::collection($exploitations);
    }


    /**
     * Display the specified resource.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $loggedUser   = Auth::user();
        $loggedUserId = (int) $loggedUser->id;
        $exploitation = Exploitation::where(['id' => $id, 'user_id' => $loggedUserId])->first();
        if (!$exploitation) {
            return response()->json([
                'success' => false,
                'message' => "Exploitation introuvable"
            ]);
        }
        return new ExploitationResource($exploitation);
    }


    /**
     * createUpdate data.
     *
     * @return \Illuminate\Http\Response
     */
    public function createUpdate(Request $request)
    {
        $validator = Validator::make(
            $request->all(),
            [
                'description'   => 'required|max:40',
                'address'       => 'nullable',
                'lattitude'     => 'nullable',
                'longitude'     => 'nullable',
            ],
            [
                'required'  => 'Le champ :attribute est requis',
                'max'       => '40 caractères maximum'
            ]
        );

        $errors = $validator->errors();
        if (count($errors) != 0) {
            return response()->json([
                'success' => false,
                'message' => $errors->first()
            ]);
        }

        $loggedUser   = Auth::user();
        $loggedUserId = (int) $loggedUser->id;
        $description  = $validator->validated()['description'];
        $address      = $validator->validated()['address'];
        $lattitude    = $validator->validated()['lattitude'];
        $longitude    = $validator->validated()['longitude'];

        $exploitationExist = Exploitation::where(['user_id' => $loggedUserId])->first();
        if (!$exploitationExist) {
            $exploitation = new Exploitation();
            $exploitation->description = $description;
            $exploitation->address = $address;
            $exploitation->lat = $lattitude;
            $exploitation->long = $longitude;
            $exploitation->user_id = $loggedUserId;
            $exploitation->save();

            return response()->json([
                'success' => true,
                'message' => "Ajouter avec succès"
            ]);
        }

        $exploitationExist->description  = $description;

        if ($address != $exploitationExist->address && $address != "") {
            $exploitationExist->address      = $address;
            $exploitationExist->lat          = $lattitude;
            $exploitationExist->long         = $longitude;
        }

        $exploitationExist->save();
        return response()->json([
            'success' => true,
            'message' => "Modification effectuée avec succès"
        ]);
    }
    
    /**
     * Remove the specified resource from storage.
     *
     * @param  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $loggedUser   = Auth::user();
        $loggedUserId = (int) $loggedUser->id;
        $exploitation = Exploitation::where(['id' => $id, 'user_id' => $loggedUserId])->first();
        if(!$exploitation) {
            return response()->json([
                'success' => false,
                'message' => "Exploitation introuvable"
            ]);
        }

        $exploitation->delete();
        return response()->json([
            'success' => true,
            'message' => "Suppression effectuée"
        ]);
    }
}
